# -*- coding: utf-8 -*-
"""assignment8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xuw7NQhPGlxxZ-yeq207U4cnYZoXi3rh
"""

import numpy as np
import matplotlib.pyplot as plt

def initialize_positions(n, N):
    # Ensure that np is used as the numpy alias correctly
    return np.random.randint(1, N + 1, size=n)

def main(n, N, num_workers, M):
    positions = initialize_positions(n, N)
    initial_positions = positions.copy()
    print(f'Initial positions: {initial_positions}')

    # Example of correctly using np in the simulation context
    for step in range(M):
        moves = np.random.choice([-1, 1], size=n)
        positions = (positions + moves - 1) % N + 1

    print(f'Final positions after {M} moves: {positions}')

    # Plotting the results
    plt.figure(figsize=(10, 5))
    plt.plot(initial_positions, 'bo', markersize=10, label='Initial Positions')
    plt.plot(positions, 'ro', markersize=5, label='Final Positions')
    plt.title('Random Walk Simulation on a Circular Lattice')
    plt.xlabel('Object Index')
    plt.ylabel('Position on Lattice')
    plt.legend()
    plt.grid(True)
    plt.show()

# Parameters
n = 10
N = 10
num_workers = 2
M = 5

main(n, N, num_workers, M)



import numpy as np
import matplotlib.pyplot as plt

def initialize_positions(n, N):
    return np.random.randint(1, N + 1, size=n)

def main(n, N, num_workers, M):
    positions = initialize_positions(n, N)
    initial_positions = positions.copy()
    print(f'Initial positions: {initial_positions}')

    # Plot initial positions
    plt.figure(figsize=(10, 5))
    plt.plot(initial_positions, 'bo', markersize=10, label='Initial Positions')
    plt.title('Random Walk Simulation on a Circular Lattice')
    plt.xlabel('Object Index')
    plt.ylabel('Position on Lattice')
    plt.legend()
    plt.grid(True)
    plt.show()

    # Perform random walk simulation and plot for each step
    for step in range(1, M + 1):
        moves = np.random.choice([-1, 1], size=n)
        positions = (positions + moves - 1) % N + 1

        # Plot positions for current step
        plt.figure(figsize=(10, 5))
        plt.plot(initial_positions, 'bo', markersize=10, label='Initial Positions')
        plt.plot(positions, 'ro', markersize=5, label=f'Step {step} Positions')
        plt.title(f'Random Walk Simulation on a Circular Lattice (Step {step})')
        plt.xlabel('Object Index')
        plt.ylabel('Position on Lattice')
        plt.legend()
        plt.grid(True)
        plt.show()

    print(f'Final positions after {M} moves: {positions}')

# Parameters
n = 10
N = 10
num_workers = 2
M = 5

main(n, N, num_workers, M)